{"name":"backbone.hammer.js","tagline":"Hammerjs events for Backbone","body":"v1.0.1\r\n\r\nA [Hammerjs](http://eightmedia.github.io/hammer.js/) adapater for\r\n[Backbone](http://backbonejs.org). Enables hammerjs event\r\nbindings for Backbone Views. For attaching touch events in the same\r\nstyle as Backbone delegateEvents. Works with or without AMD.\r\n\r\n[![wercker status](https://app.wercker.com/status/1f28ca6ffe6c9020aafe5718ed5b719b/m \"wercker status\")](https://app.wercker.com/project/bykey/1f28ca6ffe6c9020aafe5718ed5b719b)\r\n\r\n## Install with [npm](http://npmjs.org/)\r\n\r\n```\r\n$ npm install --save backbone.hammer\r\n```\r\n\r\n## Install with [Bower](http://bower.io/)\r\n\r\n```\r\n$ bower install --save backbone.hammer\r\n```\r\n\r\n## Usage\r\n\r\nDepends on the [Hammerjs jQuery\r\nplugin](https://github.com/EightMedia/hammer.js/blob/master/dist/jquery.hammer.js),\r\njQuery and, of course, Backbone & Underscore.\r\n\r\n```javascript\r\nvar view = new Backbone.View({\r\n  hammerEvents: {\r\n    'swipeleft h1': 'handleSwipe',\r\n    'tap h1': 'handleTap'\r\n  },\r\n  hammerOptions: {\r\n    tap: true\r\n  },\r\n  handleSwipe: function(){\r\n    console.log('Stop.');\r\n  },\r\n  handleTap: function(){\r\n    console.log('Hammer time!');\r\n  }\r\n});\r\n\r\nview.$('h1').trigger('swipeleft');\r\n// → \"Stop.\"\r\nview.$('h1').trigger('tap');\r\n// → \"Hammer time!\"\r\n\r\n// Access the view's hammer instance\r\nview.hammer();\r\n// → view.$el.hammer()\r\n```\r\n\r\nWorks alongside `delegateEvents` and `undelegateEvents`, so normal event\r\nbindings will be uneffected by adding hammer events.\r\n\r\n## API\r\n\r\nAll additional methods are attached to Backbone.View.prototype.\r\n\r\n**View.prototype.initialize/constructor** `new Backbone.View([options])`\r\n\r\nView constructors will accept two additional options that will be\r\nautomatically attached to instances, `hammerOptions` and `hammerEvents`.\r\nSee examples above for passing these directly to a constructor.\r\n\r\n**View.prototype.delegateHammerEvents** `delegateHammerEvents([events])`\r\n\r\nUses hammer's jQuery interface to attach delegated hammer events to the\r\nview's element. Accepts an optional events object that will be used in\r\nplace of View.prototpe.events. Unbinds any previously bound hammer\r\nevents prior to attaching new events. Called simultaneously with\r\n`delegateEvents`.\r\n\r\n**View.prototype.undelegateHammerEvents** `undelegateHammerEvents()`\r\n\r\nRemoves any bound event handlers that were created with\r\n`delegateHammerEvents`. Automatically called by `undelegateEvents`, so\r\nhammer events are removed along with other events on the view.\r\n\r\n**View.prototype.hammer** `hammer([options])`\r\n\r\nReturns the hammer instance for the view's element, directly exposing\r\nthe hammer API if you need to create hammer events directly.\r\n\r\nIn most cases, the default behavior of creating a hammer instance on the\r\nview's `el` will be sufficient. This method can be overridden if you'd\r\nlike to declare touch events on another element, just make sure to\r\nreturn a call to the hammer jQuery plugin:\r\n\r\n```javascript\r\nhammer: function(options){\r\n  return this.$('.touch-area').hammer(options);\r\n}\r\n```\r\n\r\n**Backbone.hammerOptions**\r\n\r\nDefault settings for any view that uses `hammerEvents`. See the [hammer\r\ndocs](https://github.com/EightMedia/hammer.js/wiki/Getting-Started#gesture-options) for more info.\r\n\r\n```javascript\r\nBackbone.hammerOptions = {\r\n  prevent_default: true\r\n};\r\n```\r\n\r\n## License\r\n\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}